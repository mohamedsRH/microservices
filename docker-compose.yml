version: '3.8'
services:
  # config-server:
  #   image: config-server:latest
  #   build:
  #     context: ./ConfigServer
  #     dockerfile: Dockerfile
  #   container_name: config-server
  #   ports:
  #     - "8484:8484"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=prod
  #   networks:
  #     - microservices-network

  # eureka-server:
  #   image: eureka-server:latest
  #   build:
  #     context: ./ServiceDiscovery
  #     dockerfile: Dockerfile
  #   container_name: eureka-server
  #   depends_on:
  #     - config-server
  #   ports:
  #     - "8761:8761"
  #   networks:
  #     - microservices-network

  # api-gateway:
  #   image: api-gateway:latest
  #   build:
  #     context: ./GatewayApi
  #     dockerfile: Dockerfile
  #   container_name: api-gateway
  #   ports:
  #     - "8089:8089"
  #   depends_on:
  #     - config-server
  #     - eureka-server
  #   networks:
  #     - microservices-network

  # book-microservice:
  #   image: book-microservice:latest
  #   build:
  #     context: ./BookMicroservice
  #     dockerfile: Dockerfile
  #   container_name: book-microservice
  #   depends_on:
  #     - config-server
  #     - eureka-server
  #     - mysql
  #     - kafka
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=prod
  #     - DB_HOST=mongodb
  #     - DB_PORT=27017
  #     - DB_NAME=book
  #     - DB_USERNAME=root
  #     - DB_PASSWORD=rootpassword
  #   networks:
  #     - microservices-network

  # library-microservice:
  #   image: library-microservice:latest
  #   build:
  #     context: ./LibrarayMicroservice
  #     dockerfile: Dockerfile
  #   container_name: library-microservice
  #   depends_on:
  #     - config-server
  #     - eureka-server
  #     - mongodb
  #     - kafka
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=prod
  #   networks:
  #     - microservices-network

  # mysql:
  #   image: mysql:8.0
  #   container_name: mysql
  #   environment:
  #     MYSQL_ROOT_PASSWORD: rootpassword
  #     MYSQL_DATABASE: bookdb
  #     MYSQL_USER: bookuser
  #     MYSQL_PASSWORD: bookpassword
  #   ports:
  #     - "3306:3306"
  #   volumes:
  #     - mysql-data:/var/lib/mysql
  #   networks:
  #     - microservices-network

  # mongodb:
  #   image: mongo:5.0
  #   container_name: mongodb
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - mongodb-data:/data/db
  #   networks:
  #     - microservices-network

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - 29092:29092
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - microservices-network
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - 8090:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - microservices-network

networks:
  microservices-network:
    name: microservices-network
    driver: bridge

volumes:
  mysql-data:
  mongodb-data: